{"version":3,"sources":["components/preview.tsx","components/editor.tsx","variables.tsx","containers/markdown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Preview","props","currentInput","renderer","marked","Renderer","dangerouslySetInnerHTML","__html","breaks","id","className","Editor","onChange","event","onInputChange","target","value","defaultValue","Markdown","React","setCurrentInput","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6UA0BeA,G,MAlByB,SAAAC,GAAU,IACtCC,EAAiBD,EAAjBC,aACFC,EAAW,IAAIC,IAAOC,SAE5B,OACI,2BACIC,wBAAyB,CACrBC,OAAQH,IAAOF,EAAc,CACzBC,WACAK,QAAQ,KAGhBC,GAAG,UACHC,UAAU,wBCGPC,G,MAhBuB,SAAAV,GAMlC,OACI,4BACIS,UAAU,mBACVE,SARc,SAACC,GACnBZ,EAAMa,cAAcD,EAAME,OAAOC,QAQ7BP,GAAG,SACHQ,aAAchB,EAAMgB,iBCnBnBA,EAAY,qwBCsBVC,G,MAf2B,SAAAjB,GAAU,IAAD,EACPkB,WAAuBF,GADhB,mBACxCf,EADwC,KAC1BkB,EAD0B,KAO/C,OACI,wBAAMV,UAAU,uBACZ,gBAAC,EAAD,CAAQI,cANM,SAACE,GACnBI,EAAgBJ,IAK0BC,aAAcA,IACpD,gBAAC,EAAD,CAASf,aAAcA,OCLpBmB,EARO,WAClB,OACI,yBAAKX,UAAU,OACX,kBAAC,EAAD,QCKNY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACnBC,oBACD7B,OAAOC,SAAS6B,MAEJC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,oBAAN,sBAEP/B,IAgEV,SAAiCO,EAAeC,GAE9C2B,MAAM5B,GACHK,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC/C/BE,K","file":"static/js/main.2da49fb2.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport marked from 'marked'\r\nimport './preview.scss'\r\n\r\nexport interface PreviewProps {\r\n    currentInput: string\r\n}\r\n\r\nconst Preview: React.FC<PreviewProps> = props => {\r\n    const { currentInput } = props\r\n    const renderer = new marked.Renderer()\r\n\r\n    return (\r\n        <section\r\n            dangerouslySetInnerHTML={{\r\n                __html: marked(currentInput, {\r\n                    renderer,\r\n                    breaks: true,\r\n                }),\r\n            }}\r\n            id=\"preview\"\r\n            className=\"markdown__preview\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import * as React from 'react'\r\nimport './editor.scss'\r\n\r\nexport interface KeypadProps {\r\n    defaultValue: string\r\n    onInputChange(value: string): void\r\n}\r\n\r\nconst Editor: React.FC<KeypadProps> = props => {\r\n    const onInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onInputChange(event.target.value)\r\n        return\r\n    }\r\n\r\n    return (\r\n        <textarea\r\n            className=\"markdown__editor\"\r\n            onChange={onInputChange}\r\n            id=\"editor\"\r\n            defaultValue={props.defaultValue}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Editor\r\n","export const defaultValue = `\r\n### Headers\r\n\r\n# Header 1\r\n## Header 2\r\n### Header 3\r\n#### Header 4\r\n##### Header 5\r\n###### Header 6\r\n\r\n### List\r\n\r\n- list item one\r\n- list item two\r\n- list item three\r\n\r\n### Links\r\n\r\n[FreeCodeCamp](https://learn.freecodecamp.org)\r\n\r\n[Google](https://www.google.com \"World's Most Popular Search Engine\")\r\n\r\n### Text Decorations\r\n\r\n*italic*\r\n\r\n**bold**\r\n\r\n***bold and italic***\r\n\r\n### Images\r\n\r\n![alt text](https://image.shutterstock.com/image-photo/pitbull-dog-alway-smile-260nw-629627696.jpg 'Cute Pitbull')\r\n\r\n### Blockquote\r\n\r\n> To be, or not to be. That is a stupid question.\r\n\r\n### Code\r\n\r\n\\`npm install create-react-app -g\\`\r\n\r\n\\`\\`\\`\r\nfunction addTwoNumbers(a, b) {\r\n  return a + b\r\n}\r\nconst name = 'Goran'\r\nconst age = 28\r\nconst number = Math.random() * 10\r\n\\`\\`\\`\r\n`\r\n","import * as React from 'react'\r\nimport Preview from '../components/preview'\r\nimport Editor from '../components/editor'\r\nimport { defaultValue } from '../variables'\r\nimport './markdown.scss'\r\n\r\nexport interface MarkdownProps {}\r\nconst Markdown: React.FC<MarkdownProps> = props => {\r\n    const [currentInput, setCurrentInput] = React.useState<string>(defaultValue)\r\n\r\n    const onInputChange = (value: string) => {\r\n        setCurrentInput(value)\r\n    }\r\n\r\n    return (\r\n        <main className=\"markdown__container\">\r\n            <Editor onInputChange={onInputChange} defaultValue={defaultValue} />\r\n            <Preview currentInput={currentInput} />\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Markdown\r\n","import React from 'react'\nimport './App.scss'\nimport Markdown from './containers/markdown'\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <Markdown />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}